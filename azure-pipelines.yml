# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

parameters:
- name: succeed
  displayName: Succeed or fail
  type: boolean
  default: false

trigger:
- '*'

variables:
  vmImageName: 'windows-latest'

  azureServiceConnection: 'SC-CommunicateBachelor&Trainee-gr11'
  resourceGroupName: 'bachelor-gruppe11-dev-rg'
  location: 'westeurope'
  templateFile: 'main.bicep'
  
pool:
  vmImage: $(vmImageName)
    

stages:
- stage: Build
  jobs:
  - job: Build

    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    
        
    - task: CopyFiles@2
      displayName: 'Include templates in the artifact'
      inputs:
        Contents: |
          main.bicep
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'    
      inputs:
        command: restore
        projects: '**/*.csproj' 
        
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'    

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: '**/ServerTest.csproj'
        arguments: '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage"'
        publishTestResults: true
    
    - task: PublishCodeCoverageResults@2
      displayName: 'Publish code coverage .csproj'
      inputs:
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - task: Npm@1
      displayName: npm run test
      inputs:
        command: 'custom'
        workingDir: 'ReactApp/reactapp.client'
        customCommand: 'run test:ci'

    - task: PublishTestResults@2
      displayName: 'supply npm test results to pipelines'
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: 'ReactApp/reactapp.client/junit.xml'

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish code coverage'
      inputs:
        summaryFileLocation: 'ReactApp/reactapp.client/coverage/cobertura-coverage.xml'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

  # This job creates a work item, and only runs if the previous job failed
  - job: ErrorHandler
    dependsOn: Build
    condition: failed()
    steps: 
    - bash: |
        branchName=$(echo $(build.SourceBranch) | sed 's#refs/heads/##')
        
        az boards work-item create \
          --title "Build $(build.buildNumber) failed on branch $branchName" \
          --type bug \
          --org $(System.TeamFoundationCollectionUri) \
          --project $(System.TeamProject)
      env: 
        AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
      displayName: 'Create work item on failure'

- stage: Deploy
  jobs:
  - job: Deploy
  
    steps:
    - task: DownloadBuildArtifacts@1
      displayName: 'Download artifact'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'drop'
    
    - task: AzureCLI@2
      displayName: 'Deploy Bicep file'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create `
            --name $(resourceGroupName) `
            --location $(location)
          
          az deployment group create `
            --name $(Build.BuildNumber) `
            --resource-group $(resourceGroupName) `
            --template-file $(templateFile)